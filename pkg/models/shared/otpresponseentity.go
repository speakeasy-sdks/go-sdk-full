// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OTPResponseEntityAction - The action that was invoked for this request.
type OTPResponseEntityAction string

const (
	OTPResponseEntityActionSubmitOtp OTPResponseEntityAction = "SUBMIT_OTP"
	OTPResponseEntityActionResendOtp OTPResponseEntityAction = "RESEND_OTP"
)

func (e OTPResponseEntityAction) ToPointer() *OTPResponseEntityAction {
	return &e
}

func (e *OTPResponseEntityAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBMIT_OTP":
		fallthrough
	case "RESEND_OTP":
		*e = OTPResponseEntityAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OTPResponseEntityAction: %v", v)
	}
}

// OTPResponseEntityAuthenticateStatus - Status of the is action. Will be either failed or successful. If the action is successful, you should still call the authorization status to verify the final payment status.
type OTPResponseEntityAuthenticateStatus string

const (
	OTPResponseEntityAuthenticateStatusFailed  OTPResponseEntityAuthenticateStatus = "FAILED"
	OTPResponseEntityAuthenticateStatusSuccess OTPResponseEntityAuthenticateStatus = "SUCCESS"
)

func (e OTPResponseEntityAuthenticateStatus) ToPointer() *OTPResponseEntityAuthenticateStatus {
	return &e
}

func (e *OTPResponseEntityAuthenticateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FAILED":
		fallthrough
	case "SUCCESS":
		*e = OTPResponseEntityAuthenticateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OTPResponseEntityAuthenticateStatus: %v", v)
	}
}

// OTPResponseEntity - This is the response shared when merchant inovkes the OTP submit or resend API
type OTPResponseEntity struct {
	// The action that was invoked for this request.
	Action *OTPResponseEntityAction `json:"action,omitempty"`
	// Status of the is action. Will be either failed or successful. If the action is successful, you should still call the authorization status to verify the final payment status.
	AuthenticateStatus *OTPResponseEntityAuthenticateStatus `json:"authenticate_status,omitempty"`
	// The payment id for which this request was sent
	CfPaymentID *float64 `json:"cf_payment_id,omitempty"`
	// Human readable message which describes the status in more detail
	PaymentMessage *string `json:"payment_message,omitempty"`
}

func (o *OTPResponseEntity) GetAction() *OTPResponseEntityAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *OTPResponseEntity) GetAuthenticateStatus() *OTPResponseEntityAuthenticateStatus {
	if o == nil {
		return nil
	}
	return o.AuthenticateStatus
}

func (o *OTPResponseEntity) GetCfPaymentID() *float64 {
	if o == nil {
		return nil
	}
	return o.CfPaymentID
}

func (o *OTPResponseEntity) GetPaymentMessage() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMessage
}
