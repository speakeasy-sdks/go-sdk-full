// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Provider - Specify the provider through which the payment must be processed.
type Provider string

const (
	ProviderGpay       Provider = "gpay"
	ProviderPhonepe    Provider = "phonepe"
	ProviderOla        Provider = "ola"
	ProviderPaytm      Provider = "paytm"
	ProviderAmazon     Provider = "amazon"
	ProviderAirtel     Provider = "airtel"
	ProviderFreecharge Provider = "freecharge"
	ProviderMobikwik   Provider = "mobikwik"
	ProviderJio        Provider = "jio"
)

func (e Provider) ToPointer() *Provider {
	return &e
}

func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gpay":
		fallthrough
	case "phonepe":
		fallthrough
	case "ola":
		fallthrough
	case "paytm":
		fallthrough
	case "amazon":
		fallthrough
	case "airtel":
		fallthrough
	case "freecharge":
		fallthrough
	case "mobikwik":
		fallthrough
	case "jio":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

type App struct {
	// Specify the channel through which the payment must be processed.
	Channel string `json:"channel"`
	// Customer phone number associated with a wallet for payment.
	Phone string `json:"phone"`
	// Specify the provider through which the payment must be processed.
	Provider Provider `json:"provider"`
}

func (o *App) GetChannel() string {
	if o == nil {
		return ""
	}
	return o.Channel
}

func (o *App) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

func (o *App) GetProvider() Provider {
	if o == nil {
		return Provider("")
	}
	return o.Provider
}
