// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InstrumentStatus - Status of the saved instrument.
type InstrumentStatus string

const (
	InstrumentStatusActive   InstrumentStatus = "ACTIVE"
	InstrumentStatusInactive InstrumentStatus = "INACTIVE"
)

func (e InstrumentStatus) ToPointer() *InstrumentStatus {
	return &e
}

func (e *InstrumentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = InstrumentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstrumentStatus: %v", v)
	}
}

// InstrumentType - Type of the saved instrument
type InstrumentType string

const (
	InstrumentTypeCard InstrumentType = "card"
)

func (e InstrumentType) ToPointer() *InstrumentType {
	return &e
}

func (e *InstrumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card":
		*e = InstrumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstrumentType: %v", v)
	}
}

type FetchAllSavedInstruments struct {
	// cf_payment_id of the successful transaction done while saving instrument
	AfaReference *int64 `json:"afa_reference,omitempty"`
	// Timestamp at which instrument was saved.
	CreatedAt *string `json:"created_at,omitempty"`
	// customer_id for which the instrument was saved
	CustomerID *string `json:"customer_id,omitempty"`
	// masked card number displayed to the customer
	InstrumentDisplay *string `json:"instrument_display,omitempty"`
	// saved instrument id
	InstrumentID   *string              `json:"instrument_id,omitempty"`
	InstrumentMeta *SavedInstrumentMeta `json:"instrument_meta,omitempty"`
	// Status of the saved instrument.
	InstrumentStatus *InstrumentStatus `json:"instrument_status,omitempty"`
	// Type of the saved instrument
	InstrumentType *InstrumentType `json:"instrument_type,omitempty"`
	// Unique id for the saved instrument
	InstrumentUID *string `json:"instrument_uid,omitempty"`
}

func (o *FetchAllSavedInstruments) GetAfaReference() *int64 {
	if o == nil {
		return nil
	}
	return o.AfaReference
}

func (o *FetchAllSavedInstruments) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FetchAllSavedInstruments) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *FetchAllSavedInstruments) GetInstrumentDisplay() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentDisplay
}

func (o *FetchAllSavedInstruments) GetInstrumentID() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentID
}

func (o *FetchAllSavedInstruments) GetInstrumentMeta() *SavedInstrumentMeta {
	if o == nil {
		return nil
	}
	return o.InstrumentMeta
}

func (o *FetchAllSavedInstruments) GetInstrumentStatus() *InstrumentStatus {
	if o == nil {
		return nil
	}
	return o.InstrumentStatus
}

func (o *FetchAllSavedInstruments) GetInstrumentType() *InstrumentType {
	if o == nil {
		return nil
	}
	return o.InstrumentType
}

func (o *FetchAllSavedInstruments) GetInstrumentUID() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentUID
}
