// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/go-sdk-full/pkg/types"
	"github.com/speakeasy-sdks/go-sdk-full/pkg/utils"
)

// FetchAllSavedInstrumentsInstrumentStatus - Status of the saved instrument.
type FetchAllSavedInstrumentsInstrumentStatus string

const (
	FetchAllSavedInstrumentsInstrumentStatusActive   FetchAllSavedInstrumentsInstrumentStatus = "ACTIVE"
	FetchAllSavedInstrumentsInstrumentStatusInactive FetchAllSavedInstrumentsInstrumentStatus = "INACTIVE"
)

func (e FetchAllSavedInstrumentsInstrumentStatus) ToPointer() *FetchAllSavedInstrumentsInstrumentStatus {
	return &e
}

func (e *FetchAllSavedInstrumentsInstrumentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = FetchAllSavedInstrumentsInstrumentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FetchAllSavedInstrumentsInstrumentStatus: %v", v)
	}
}

type FetchAllSavedInstruments struct {
	// cf_payment_id of the successful transaction done while saving instrument
	AfaReference *int64 `json:"afa_reference,omitempty"`
	// Timestamp at which instrument was saved.
	CreatedAt *string `json:"created_at,omitempty"`
	// customer_id for which the instrument was saved
	CustomerID *string `json:"customer_id,omitempty"`
	// masked card number displayed to the customer
	InstrumentDisplay *string `json:"instrument_display,omitempty"`
	// saved instrument id
	InstrumentID   *string              `json:"instrument_id,omitempty"`
	InstrumentMeta *SavedInstrumentMeta `json:"instrument_meta,omitempty"`
	// Status of the saved instrument.
	InstrumentStatus *FetchAllSavedInstrumentsInstrumentStatus `json:"instrument_status,omitempty"`
	// Type of the saved instrument
	instrumentType *string `const:"card" json:"instrument_type,omitempty"`
	// Unique id for the saved instrument
	InstrumentUID *string `json:"instrument_uid,omitempty"`
}

func (f FetchAllSavedInstruments) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FetchAllSavedInstruments) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *FetchAllSavedInstruments) GetAfaReference() *int64 {
	if o == nil {
		return nil
	}
	return o.AfaReference
}

func (o *FetchAllSavedInstruments) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FetchAllSavedInstruments) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *FetchAllSavedInstruments) GetInstrumentDisplay() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentDisplay
}

func (o *FetchAllSavedInstruments) GetInstrumentID() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentID
}

func (o *FetchAllSavedInstruments) GetInstrumentMeta() *SavedInstrumentMeta {
	if o == nil {
		return nil
	}
	return o.InstrumentMeta
}

func (o *FetchAllSavedInstruments) GetInstrumentStatus() *FetchAllSavedInstrumentsInstrumentStatus {
	if o == nil {
		return nil
	}
	return o.InstrumentStatus
}

func (o *FetchAllSavedInstruments) GetInstrumentType() *string {
	return types.String("card")
}

func (o *FetchAllSavedInstruments) GetInstrumentUID() *string {
	if o == nil {
		return nil
	}
	return o.InstrumentUID
}
