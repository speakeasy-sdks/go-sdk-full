// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type FetchPGReconRequestFilters struct {
	// Specify the end date till when you want the settlement reconciliation details.
	EndDate string `json:"end_date"`
	// Specify the start date from when you want the settlement reconciliation details.
	StartDate string `json:"start_date"`
}

func (o *FetchPGReconRequestFilters) GetEndDate() string {
	if o == nil {
		return ""
	}
	return o.EndDate
}

func (o *FetchPGReconRequestFilters) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}

// FetchPGReconRequestPagination - To fetch the next set of settlements, pass the cursor received in the response to the next API call.
//
//	To receive the data for the first time, pass the cursor as null.
//	Limit would be number of settlements that you want to receive.
type FetchPGReconRequestPagination struct {
	// Specifies from where the next set of settlement details should be fetched.
	Cursor *string `json:"cursor,omitempty"`
	// Number of settlements you want to fetch in the next iteration. Maximum limit is 1000, default value is 10.
	Limit int64 `json:"limit"`
}

func (o *FetchPGReconRequestPagination) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *FetchPGReconRequestPagination) GetLimit() int64 {
	if o == nil {
		return 0
	}
	return o.Limit
}

type FetchPGReconRequest struct {
	Filters FetchPGReconRequestFilters `json:"filters"`
	// To fetch the next set of settlements, pass the cursor received in the response to the next API call.
	//  To receive the data for the first time, pass the cursor as null.
	//  Limit would be number of settlements that you want to receive.
	Pagination FetchPGReconRequestPagination `json:"pagination"`
}

func (o *FetchPGReconRequest) GetFilters() FetchPGReconRequestFilters {
	if o == nil {
		return FetchPGReconRequestFilters{}
	}
	return o.Filters
}

func (o *FetchPGReconRequest) GetPagination() FetchPGReconRequestPagination {
	if o == nil {
		return FetchPGReconRequestPagination{}
	}
	return o.Pagination
}
