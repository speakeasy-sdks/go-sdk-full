// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateRefundRequestRefundSpeed - Speed at which the refund is processed. It's an optional field with default being STANDARD
type CreateRefundRequestRefundSpeed string

const (
	CreateRefundRequestRefundSpeedStandard CreateRefundRequestRefundSpeed = "STANDARD"
	CreateRefundRequestRefundSpeedInstant  CreateRefundRequestRefundSpeed = "INSTANT"
)

func (e CreateRefundRequestRefundSpeed) ToPointer() *CreateRefundRequestRefundSpeed {
	return &e
}

func (e *CreateRefundRequestRefundSpeed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STANDARD":
		fallthrough
	case "INSTANT":
		*e = CreateRefundRequestRefundSpeed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRefundRequestRefundSpeed: %v", v)
	}
}

type CreateRefundRequest struct {
	// Amount to be refunded. Should be lesser than or equal to the transaction amount. (Decimals allowed)
	RefundAmount float64 `json:"refund_amount"`
	// An unique ID to associate the refund with. Provie alphanumeric values
	RefundID string `json:"refund_id"`
	// A refund note for your reference.
	RefundNote *string `json:"refund_note,omitempty"`
	// Speed at which the refund is processed. It's an optional field with default being STANDARD
	RefundSpeed  *CreateRefundRequestRefundSpeed `json:"refund_speed,omitempty"`
	RefundSplits []VendorSplit                   `json:"refund_splits,omitempty"`
}

func (o *CreateRefundRequest) GetRefundAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RefundAmount
}

func (o *CreateRefundRequest) GetRefundID() string {
	if o == nil {
		return ""
	}
	return o.RefundID
}

func (o *CreateRefundRequest) GetRefundNote() *string {
	if o == nil {
		return nil
	}
	return o.RefundNote
}

func (o *CreateRefundRequest) GetRefundSpeed() *CreateRefundRequestRefundSpeed {
	if o == nil {
		return nil
	}
	return o.RefundSpeed
}

func (o *CreateRefundRequest) GetRefundSplits() []VendorSplit {
	if o == nil {
		return nil
	}
	return o.RefundSplits
}
