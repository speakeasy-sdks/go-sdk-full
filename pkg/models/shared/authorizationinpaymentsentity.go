// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuthorizationInPaymentsEntityAction - One of CAPTURE or VOID
type AuthorizationInPaymentsEntityAction string

const (
	AuthorizationInPaymentsEntityActionCapture AuthorizationInPaymentsEntityAction = "CAPTURE"
	AuthorizationInPaymentsEntityActionVoid    AuthorizationInPaymentsEntityAction = "VOID"
)

func (e AuthorizationInPaymentsEntityAction) ToPointer() *AuthorizationInPaymentsEntityAction {
	return &e
}

func (e *AuthorizationInPaymentsEntityAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAPTURE":
		fallthrough
	case "VOID":
		*e = AuthorizationInPaymentsEntityAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationInPaymentsEntityAction: %v", v)
	}
}

// AuthorizationInPaymentsEntityStatus - One of SUCCESS or PENDING
type AuthorizationInPaymentsEntityStatus string

const (
	AuthorizationInPaymentsEntityStatusSuccess AuthorizationInPaymentsEntityStatus = "SUCCESS"
	AuthorizationInPaymentsEntityStatusPending AuthorizationInPaymentsEntityStatus = "PENDING"
)

func (e AuthorizationInPaymentsEntityStatus) ToPointer() *AuthorizationInPaymentsEntityStatus {
	return &e
}

func (e *AuthorizationInPaymentsEntityStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCESS":
		fallthrough
	case "PENDING":
		*e = AuthorizationInPaymentsEntityStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizationInPaymentsEntityStatus: %v", v)
	}
}

// AuthorizationInPaymentsEntity - The authorization details are present for payments which go through the preauthorization workflow. Or else this parameter will be null.
type AuthorizationInPaymentsEntity struct {
	// One of CAPTURE or VOID
	Action *AuthorizationInPaymentsEntityAction `json:"action,omitempty"`
	// CAPTURE or VOID reference number based on action
	ActionReference *string `json:"action_reference,omitempty"`
	// Time of action (CAPTURE or VOID)
	ActionTime *string `json:"action_time,omitempty"`
	// Approve by time as passed in the authorization request (only for UPI)
	ApproveBy *string `json:"approve_by,omitempty"`
	// The captured amount for this authorization request
	CapturedAmount *float64 `json:"captured_amount,omitempty"`
	// End time of this authorization hold (only for UPI)
	EndTime *string `json:"end_time,omitempty"`
	// Start time of this authorization hold (only for UPI)
	StartTime *string `json:"start_time,omitempty"`
	// One of SUCCESS or PENDING
	Status *AuthorizationInPaymentsEntityStatus `json:"status,omitempty"`
}

func (o *AuthorizationInPaymentsEntity) GetAction() *AuthorizationInPaymentsEntityAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *AuthorizationInPaymentsEntity) GetActionReference() *string {
	if o == nil {
		return nil
	}
	return o.ActionReference
}

func (o *AuthorizationInPaymentsEntity) GetActionTime() *string {
	if o == nil {
		return nil
	}
	return o.ActionTime
}

func (o *AuthorizationInPaymentsEntity) GetApproveBy() *string {
	if o == nil {
		return nil
	}
	return o.ApproveBy
}

func (o *AuthorizationInPaymentsEntity) GetCapturedAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.CapturedAmount
}

func (o *AuthorizationInPaymentsEntity) GetEndTime() *string {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *AuthorizationInPaymentsEntity) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *AuthorizationInPaymentsEntity) GetStatus() *AuthorizationInPaymentsEntityStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
