// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/go-sdk-full/v3/pkg/utils"
)

type PaymentMethodInPaymentsEntityPaymentMethodType string

const (
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardInPaymentsEntity        PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodCardInPaymentsEntity"
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodNetBankingInPaymentsEntity  PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodNetBankingInPaymentsEntity"
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodUPIInPaymentsEntity         PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodUPIInPaymentsEntity"
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodAppInPaymentsEntity         PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodAppInPaymentsEntity"
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardlessEMIInPaymentsEntity PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodCardlessEMIInPaymentsEntity"
	PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodPaylaterInPaymentsEntity    PaymentMethodInPaymentsEntityPaymentMethodType = "PaymentMethodPaylaterInPaymentsEntity"
)

type PaymentMethodInPaymentsEntityPaymentMethod struct {
	PaymentMethodCardInPaymentsEntity        *PaymentMethodCardInPaymentsEntity
	PaymentMethodNetBankingInPaymentsEntity  *PaymentMethodNetBankingInPaymentsEntity
	PaymentMethodUPIInPaymentsEntity         *PaymentMethodUPIInPaymentsEntity
	PaymentMethodAppInPaymentsEntity         *PaymentMethodAppInPaymentsEntity
	PaymentMethodCardlessEMIInPaymentsEntity *PaymentMethodCardlessEMIInPaymentsEntity
	PaymentMethodPaylaterInPaymentsEntity    *PaymentMethodPaylaterInPaymentsEntity

	Type PaymentMethodInPaymentsEntityPaymentMethodType
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodCardInPaymentsEntity(paymentMethodCardInPaymentsEntity PaymentMethodCardInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodCardInPaymentsEntity: &paymentMethodCardInPaymentsEntity,
		Type:                              typ,
	}
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodNetBankingInPaymentsEntity(paymentMethodNetBankingInPaymentsEntity PaymentMethodNetBankingInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodNetBankingInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodNetBankingInPaymentsEntity: &paymentMethodNetBankingInPaymentsEntity,
		Type:                                    typ,
	}
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodUPIInPaymentsEntity(paymentMethodUPIInPaymentsEntity PaymentMethodUPIInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodUPIInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodUPIInPaymentsEntity: &paymentMethodUPIInPaymentsEntity,
		Type:                             typ,
	}
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodAppInPaymentsEntity(paymentMethodAppInPaymentsEntity PaymentMethodAppInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodAppInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodAppInPaymentsEntity: &paymentMethodAppInPaymentsEntity,
		Type:                             typ,
	}
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodCardlessEMIInPaymentsEntity(paymentMethodCardlessEMIInPaymentsEntity PaymentMethodCardlessEMIInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardlessEMIInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodCardlessEMIInPaymentsEntity: &paymentMethodCardlessEMIInPaymentsEntity,
		Type:                                     typ,
	}
}

func CreatePaymentMethodInPaymentsEntityPaymentMethodPaymentMethodPaylaterInPaymentsEntity(paymentMethodPaylaterInPaymentsEntity PaymentMethodPaylaterInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	typ := PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodPaylaterInPaymentsEntity

	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodPaylaterInPaymentsEntity: &paymentMethodPaylaterInPaymentsEntity,
		Type:                                  typ,
	}
}

func (u *PaymentMethodInPaymentsEntityPaymentMethod) UnmarshalJSON(data []byte) error {

	paymentMethodUPIInPaymentsEntity := PaymentMethodUPIInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodUPIInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodUPIInPaymentsEntity = &paymentMethodUPIInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodUPIInPaymentsEntity
		return nil
	}

	paymentMethodNetBankingInPaymentsEntity := PaymentMethodNetBankingInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodNetBankingInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodNetBankingInPaymentsEntity = &paymentMethodNetBankingInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodNetBankingInPaymentsEntity
		return nil
	}

	paymentMethodAppInPaymentsEntity := PaymentMethodAppInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodAppInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodAppInPaymentsEntity = &paymentMethodAppInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodAppInPaymentsEntity
		return nil
	}

	paymentMethodCardlessEMIInPaymentsEntity := PaymentMethodCardlessEMIInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodCardlessEMIInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodCardlessEMIInPaymentsEntity = &paymentMethodCardlessEMIInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardlessEMIInPaymentsEntity
		return nil
	}

	paymentMethodPaylaterInPaymentsEntity := PaymentMethodPaylaterInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodPaylaterInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodPaylaterInPaymentsEntity = &paymentMethodPaylaterInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodPaylaterInPaymentsEntity
		return nil
	}

	paymentMethodCardInPaymentsEntity := PaymentMethodCardInPaymentsEntity{}
	if err := utils.UnmarshalJSON(data, &paymentMethodCardInPaymentsEntity, "", true, true); err == nil {
		u.PaymentMethodCardInPaymentsEntity = &paymentMethodCardInPaymentsEntity
		u.Type = PaymentMethodInPaymentsEntityPaymentMethodTypePaymentMethodCardInPaymentsEntity
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentMethodInPaymentsEntityPaymentMethod) MarshalJSON() ([]byte, error) {
	if u.PaymentMethodCardInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodCardInPaymentsEntity, "", true)
	}

	if u.PaymentMethodNetBankingInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodNetBankingInPaymentsEntity, "", true)
	}

	if u.PaymentMethodUPIInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodUPIInPaymentsEntity, "", true)
	}

	if u.PaymentMethodAppInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodAppInPaymentsEntity, "", true)
	}

	if u.PaymentMethodCardlessEMIInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodCardlessEMIInPaymentsEntity, "", true)
	}

	if u.PaymentMethodPaylaterInPaymentsEntity != nil {
		return utils.MarshalJSON(u.PaymentMethodPaylaterInPaymentsEntity, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type PaymentMethodInPaymentsEntity struct {
	PaymentMethod *PaymentMethodInPaymentsEntityPaymentMethod `json:"payment_method,omitempty"`
}

func (o *PaymentMethodInPaymentsEntity) GetPaymentMethod() *PaymentMethodInPaymentsEntityPaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}
