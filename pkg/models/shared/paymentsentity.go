// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentStatus - The transaction status can be one of  ["SUCCESS", "NOT_ATTEMPTED", "FAILED", "USER_DROPPED", "VOID", "CANCELLED", "PENDING"]
type PaymentStatus string

const (
	PaymentStatusSuccess      PaymentStatus = "SUCCESS"
	PaymentStatusNotAttempted PaymentStatus = "NOT_ATTEMPTED"
	PaymentStatusFailed       PaymentStatus = "FAILED"
	PaymentStatusUserDropped  PaymentStatus = "USER_DROPPED"
	PaymentStatusVoid         PaymentStatus = "VOID"
	PaymentStatusCancelled    PaymentStatus = "CANCELLED"
	PaymentStatusPending      PaymentStatus = "PENDING"
)

func (e PaymentStatus) ToPointer() *PaymentStatus {
	return &e
}

func (e *PaymentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUCCESS":
		fallthrough
	case "NOT_ATTEMPTED":
		fallthrough
	case "FAILED":
		fallthrough
	case "USER_DROPPED":
		fallthrough
	case "VOID":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "PENDING":
		*e = PaymentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentStatus: %v", v)
	}
}

type PaymentsEntity struct {
	AuthID *string `json:"auth_id,omitempty"`
	// The authorization details are present for payments which go through the preauthorization workflow. Or else this parameter will be null.
	Authorization *AuthorizationInPaymentsEntity `json:"authorization,omitempty"`
	BankReference *string                        `json:"bank_reference,omitempty"`
	CfPaymentID   *int64                         `json:"cf_payment_id,omitempty"`
	Entity        *string                        `json:"entity,omitempty"`
	// The error details are present only for failed payments
	ErrorDetails *ErrorDetailsInPaymentsEntity `json:"error_details,omitempty"`
	IsCaptured   *bool                         `json:"is_captured,omitempty"`
	// Order amount can be different from payment amount if you collect service fee from the customer
	OrderAmount   *float64 `json:"order_amount,omitempty"`
	OrderID       *string  `json:"order_id,omitempty"`
	PaymentAmount *float64 `json:"payment_amount,omitempty"`
	// This is the time when the payment reaches its terminal state
	PaymentCompletionTime *string `json:"payment_completion_time,omitempty"`
	PaymentCurrency       *string `json:"payment_currency,omitempty"`
	// Type of payment group. One of ['upi', 'card', 'app', 'netbanking', 'paylater', 'cardless_emi']
	PaymentGroup   *string                        `json:"payment_group,omitempty"`
	PaymentMessage *string                        `json:"payment_message,omitempty"`
	PaymentMethod  *PaymentMethodInPaymentsEntity `json:"payment_method,omitempty"`
	// The transaction status can be one of  ["SUCCESS", "NOT_ATTEMPTED", "FAILED", "USER_DROPPED", "VOID", "CANCELLED", "PENDING"]
	PaymentStatus *PaymentStatus `json:"payment_status,omitempty"`
	// This is the time when the payment was initiated
	PaymentTime *string `json:"payment_time,omitempty"`
}

func (o *PaymentsEntity) GetAuthID() *string {
	if o == nil {
		return nil
	}
	return o.AuthID
}

func (o *PaymentsEntity) GetAuthorization() *AuthorizationInPaymentsEntity {
	if o == nil {
		return nil
	}
	return o.Authorization
}

func (o *PaymentsEntity) GetBankReference() *string {
	if o == nil {
		return nil
	}
	return o.BankReference
}

func (o *PaymentsEntity) GetCfPaymentID() *int64 {
	if o == nil {
		return nil
	}
	return o.CfPaymentID
}

func (o *PaymentsEntity) GetEntity() *string {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *PaymentsEntity) GetErrorDetails() *ErrorDetailsInPaymentsEntity {
	if o == nil {
		return nil
	}
	return o.ErrorDetails
}

func (o *PaymentsEntity) GetIsCaptured() *bool {
	if o == nil {
		return nil
	}
	return o.IsCaptured
}

func (o *PaymentsEntity) GetOrderAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.OrderAmount
}

func (o *PaymentsEntity) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *PaymentsEntity) GetPaymentAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.PaymentAmount
}

func (o *PaymentsEntity) GetPaymentCompletionTime() *string {
	if o == nil {
		return nil
	}
	return o.PaymentCompletionTime
}

func (o *PaymentsEntity) GetPaymentCurrency() *string {
	if o == nil {
		return nil
	}
	return o.PaymentCurrency
}

func (o *PaymentsEntity) GetPaymentGroup() *string {
	if o == nil {
		return nil
	}
	return o.PaymentGroup
}

func (o *PaymentsEntity) GetPaymentMessage() *string {
	if o == nil {
		return nil
	}
	return o.PaymentMessage
}

func (o *PaymentsEntity) GetPaymentMethod() *PaymentMethodInPaymentsEntity {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *PaymentsEntity) GetPaymentStatus() *PaymentStatus {
	if o == nil {
		return nil
	}
	return o.PaymentStatus
}

func (o *PaymentsEntity) GetPaymentTime() *string {
	if o == nil {
		return nil
	}
	return o.PaymentTime
}
