// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CardEMICardBankName - Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of ["hdfc, "kotak", "icici", "rbl", "bob", "standard chartered", "axis", "au", "yes", "sbi", "fed", "hsbc", "citi", "amex"]
type CardEMICardBankName string

const (
	CardEMICardBankNameHdfc              CardEMICardBankName = "hdfc"
	CardEMICardBankNameKotak             CardEMICardBankName = "kotak"
	CardEMICardBankNameIcici             CardEMICardBankName = "icici"
	CardEMICardBankNameRbl               CardEMICardBankName = "rbl"
	CardEMICardBankNameBob               CardEMICardBankName = "bob"
	CardEMICardBankNameStandardChartered CardEMICardBankName = "standard chartered"
	CardEMICardBankNameAxis              CardEMICardBankName = "axis"
	CardEMICardBankNameAu                CardEMICardBankName = "au"
	CardEMICardBankNameYes               CardEMICardBankName = "yes"
	CardEMICardBankNameSbi               CardEMICardBankName = "sbi"
	CardEMICardBankNameFed               CardEMICardBankName = "fed"
	CardEMICardBankNameHsbc              CardEMICardBankName = "hsbc"
	CardEMICardBankNameCiti              CardEMICardBankName = "citi"
	CardEMICardBankNameAmex              CardEMICardBankName = "amex"
)

func (e CardEMICardBankName) ToPointer() *CardEMICardBankName {
	return &e
}

func (e *CardEMICardBankName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hdfc":
		fallthrough
	case "kotak":
		fallthrough
	case "icici":
		fallthrough
	case "rbl":
		fallthrough
	case "bob":
		fallthrough
	case "standard chartered":
		fallthrough
	case "axis":
		fallthrough
	case "au":
		fallthrough
	case "yes":
		fallthrough
	case "sbi":
		fallthrough
	case "fed":
		fallthrough
	case "hsbc":
		fallthrough
	case "citi":
		fallthrough
	case "amex":
		*e = CardEMICardBankName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardEMICardBankName: %v", v)
	}
}

type CardEMI struct {
	// Card alias as returned by Cashfree Vault API
	CardAlias *string `json:"card_alias,omitempty"`
	// Card bank name, required for EMI payments. This is the bank user has selected for EMI. One of ["hdfc, "kotak", "icici", "rbl", "bob", "standard chartered", "axis", "au", "yes", "sbi", "fed", "hsbc", "citi", "amex"]
	CardBankName *CardEMICardBankName `json:"card_bank_name,omitempty"`
	// CVV mentioned on the card.
	CardCvv *string `json:"card_cvv,omitempty"`
	// Card expiry month.
	CardExpiryMm *string `json:"card_expiry_mm,omitempty"`
	// Card expiry year.
	CardExpiryYy *string `json:"card_expiry_yy,omitempty"`
	// Customer name mentioned on the card.
	CardHolderName *string `json:"card_holder_name,omitempty"`
	// Customer card number.
	CardNumber *string `json:"card_number,omitempty"`
	// The channel for card payments will always be "link"
	Channel *string `json:"channel,omitempty"`
	// EMI tenure selected by the user
	EmiTenure *int64 `json:"emi_tenure,omitempty"`
}

func (o *CardEMI) GetCardAlias() *string {
	if o == nil {
		return nil
	}
	return o.CardAlias
}

func (o *CardEMI) GetCardBankName() *CardEMICardBankName {
	if o == nil {
		return nil
	}
	return o.CardBankName
}

func (o *CardEMI) GetCardCvv() *string {
	if o == nil {
		return nil
	}
	return o.CardCvv
}

func (o *CardEMI) GetCardExpiryMm() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryMm
}

func (o *CardEMI) GetCardExpiryYy() *string {
	if o == nil {
		return nil
	}
	return o.CardExpiryYy
}

func (o *CardEMI) GetCardHolderName() *string {
	if o == nil {
		return nil
	}
	return o.CardHolderName
}

func (o *CardEMI) GetCardNumber() *string {
	if o == nil {
		return nil
	}
	return o.CardNumber
}

func (o *CardEMI) GetChannel() *string {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *CardEMI) GetEmiTenure() *int64 {
	if o == nil {
		return nil
	}
	return o.EmiTenure
}
