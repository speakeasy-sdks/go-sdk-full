// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/go-sdk-full/v2/pkg/utils"
)

type PaymentMethodType string

const (
	PaymentMethodTypeOfferAll      PaymentMethodType = "OfferAll"
	PaymentMethodTypeOfferCard     PaymentMethodType = "OfferCard"
	PaymentMethodTypeOfferNB       PaymentMethodType = "OfferNB"
	PaymentMethodTypeOfferWallet   PaymentMethodType = "OfferWallet"
	PaymentMethodTypeOfferUPI      PaymentMethodType = "OfferUPI"
	PaymentMethodTypeOfferPaylater PaymentMethodType = "OfferPaylater"
	PaymentMethodTypeOfferEMI      PaymentMethodType = "OfferEMI"
)

type PaymentMethod struct {
	OfferAll      *OfferAll
	OfferCard     *OfferCard
	OfferNB       *OfferNB
	OfferWallet   *OfferWallet
	OfferUPI      *OfferUPI
	OfferPaylater *OfferPaylater
	OfferEMI      *OfferEMI

	Type PaymentMethodType
}

func CreatePaymentMethodOfferAll(offerAll OfferAll) PaymentMethod {
	typ := PaymentMethodTypeOfferAll

	return PaymentMethod{
		OfferAll: &offerAll,
		Type:     typ,
	}
}

func CreatePaymentMethodOfferCard(offerCard OfferCard) PaymentMethod {
	typ := PaymentMethodTypeOfferCard

	return PaymentMethod{
		OfferCard: &offerCard,
		Type:      typ,
	}
}

func CreatePaymentMethodOfferNB(offerNB OfferNB) PaymentMethod {
	typ := PaymentMethodTypeOfferNB

	return PaymentMethod{
		OfferNB: &offerNB,
		Type:    typ,
	}
}

func CreatePaymentMethodOfferWallet(offerWallet OfferWallet) PaymentMethod {
	typ := PaymentMethodTypeOfferWallet

	return PaymentMethod{
		OfferWallet: &offerWallet,
		Type:        typ,
	}
}

func CreatePaymentMethodOfferUPI(offerUPI OfferUPI) PaymentMethod {
	typ := PaymentMethodTypeOfferUPI

	return PaymentMethod{
		OfferUPI: &offerUPI,
		Type:     typ,
	}
}

func CreatePaymentMethodOfferPaylater(offerPaylater OfferPaylater) PaymentMethod {
	typ := PaymentMethodTypeOfferPaylater

	return PaymentMethod{
		OfferPaylater: &offerPaylater,
		Type:          typ,
	}
}

func CreatePaymentMethodOfferEMI(offerEMI OfferEMI) PaymentMethod {
	typ := PaymentMethodTypeOfferEMI

	return PaymentMethod{
		OfferEMI: &offerEMI,
		Type:     typ,
	}
}

func (u *PaymentMethod) UnmarshalJSON(data []byte) error {

	offerAll := OfferAll{}
	if err := utils.UnmarshalJSON(data, &offerAll, "", true, true); err == nil {
		u.OfferAll = &offerAll
		u.Type = PaymentMethodTypeOfferAll
		return nil
	}

	offerCard := OfferCard{}
	if err := utils.UnmarshalJSON(data, &offerCard, "", true, true); err == nil {
		u.OfferCard = &offerCard
		u.Type = PaymentMethodTypeOfferCard
		return nil
	}

	offerNB := OfferNB{}
	if err := utils.UnmarshalJSON(data, &offerNB, "", true, true); err == nil {
		u.OfferNB = &offerNB
		u.Type = PaymentMethodTypeOfferNB
		return nil
	}

	offerWallet := OfferWallet{}
	if err := utils.UnmarshalJSON(data, &offerWallet, "", true, true); err == nil {
		u.OfferWallet = &offerWallet
		u.Type = PaymentMethodTypeOfferWallet
		return nil
	}

	offerUPI := OfferUPI{}
	if err := utils.UnmarshalJSON(data, &offerUPI, "", true, true); err == nil {
		u.OfferUPI = &offerUPI
		u.Type = PaymentMethodTypeOfferUPI
		return nil
	}

	offerPaylater := OfferPaylater{}
	if err := utils.UnmarshalJSON(data, &offerPaylater, "", true, true); err == nil {
		u.OfferPaylater = &offerPaylater
		u.Type = PaymentMethodTypeOfferPaylater
		return nil
	}

	offerEMI := OfferEMI{}
	if err := utils.UnmarshalJSON(data, &offerEMI, "", true, true); err == nil {
		u.OfferEMI = &offerEMI
		u.Type = PaymentMethodTypeOfferEMI
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentMethod) MarshalJSON() ([]byte, error) {
	if u.OfferAll != nil {
		return utils.MarshalJSON(u.OfferAll, "", true)
	}

	if u.OfferCard != nil {
		return utils.MarshalJSON(u.OfferCard, "", true)
	}

	if u.OfferNB != nil {
		return utils.MarshalJSON(u.OfferNB, "", true)
	}

	if u.OfferWallet != nil {
		return utils.MarshalJSON(u.OfferWallet, "", true)
	}

	if u.OfferUPI != nil {
		return utils.MarshalJSON(u.OfferUPI, "", true)
	}

	if u.OfferPaylater != nil {
		return utils.MarshalJSON(u.OfferPaylater, "", true)
	}

	if u.OfferEMI != nil {
		return utils.MarshalJSON(u.OfferEMI, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type OfferValidations struct {
	// Maximum amount of Offer that can be availed.
	MaxAllowed string `json:"max_allowed"`
	// Minimum Amount for Offer to be Applicable
	MinAmount     *string       `json:"min_amount,omitempty"`
	PaymentMethod PaymentMethod `json:"payment_method"`
}

func (o *OfferValidations) GetMaxAllowed() string {
	if o == nil {
		return ""
	}
	return o.MaxAllowed
}

func (o *OfferValidations) GetMinAmount() *string {
	if o == nil {
		return nil
	}
	return o.MinAmount
}

func (o *OfferValidations) GetPaymentMethod() PaymentMethod {
	if o == nil {
		return PaymentMethod{}
	}
	return o.PaymentMethod
}
