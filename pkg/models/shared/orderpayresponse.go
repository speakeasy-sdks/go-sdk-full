// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OrderPayResponseAction - One of ["link", "custom", "form"]
type OrderPayResponseAction string

const (
	OrderPayResponseActionLink   OrderPayResponseAction = "link"
	OrderPayResponseActionCustom OrderPayResponseAction = "custom"
	OrderPayResponseActionForm   OrderPayResponseAction = "form"
)

func (e OrderPayResponseAction) ToPointer() *OrderPayResponseAction {
	return &e
}

func (e *OrderPayResponseAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		fallthrough
	case "custom":
		fallthrough
	case "form":
		*e = OrderPayResponseAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPayResponseAction: %v", v)
	}
}

// OrderPayResponseChannel - One of ["link", "collect", "qrcode"]. In an older version we used to support different channels like 'gpay', 'phonepe' etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as 'link' and provider as 'gpay'
type OrderPayResponseChannel string

const (
	OrderPayResponseChannelLink    OrderPayResponseChannel = "link"
	OrderPayResponseChannelCollect OrderPayResponseChannel = "collect"
	OrderPayResponseChannelQrcode  OrderPayResponseChannel = "qrcode"
)

func (e OrderPayResponseChannel) ToPointer() *OrderPayResponseChannel {
	return &e
}

func (e *OrderPayResponseChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		fallthrough
	case "collect":
		fallthrough
	case "qrcode":
		*e = OrderPayResponseChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPayResponseChannel: %v", v)
	}
}

// OrderPayResponsePaymentMethod - One of ["upi", "netbanking", "card", "app", "cardless_emi", "paylater"]
type OrderPayResponsePaymentMethod string

const (
	OrderPayResponsePaymentMethodNetbanking  OrderPayResponsePaymentMethod = "netbanking"
	OrderPayResponsePaymentMethodCard        OrderPayResponsePaymentMethod = "card"
	OrderPayResponsePaymentMethodUpi         OrderPayResponsePaymentMethod = "upi"
	OrderPayResponsePaymentMethodApp         OrderPayResponsePaymentMethod = "app"
	OrderPayResponsePaymentMethodCardlessEmi OrderPayResponsePaymentMethod = "cardless_emi"
	OrderPayResponsePaymentMethodPaylater    OrderPayResponsePaymentMethod = "paylater"
)

func (e OrderPayResponsePaymentMethod) ToPointer() *OrderPayResponsePaymentMethod {
	return &e
}

func (e *OrderPayResponsePaymentMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "netbanking":
		fallthrough
	case "card":
		fallthrough
	case "upi":
		fallthrough
	case "app":
		fallthrough
	case "cardless_emi":
		fallthrough
	case "paylater":
		*e = OrderPayResponsePaymentMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderPayResponsePaymentMethod: %v", v)
	}
}

// OrderPayResponse - OK
type OrderPayResponse struct {
	// One of ["link", "custom", "form"]
	Action *OrderPayResponseAction `json:"action,omitempty"`
	// Payment identifier created by Cashfree
	CfPaymentID *int64 `json:"cf_payment_id,omitempty"`
	// One of ["link", "collect", "qrcode"]. In an older version we used to support different channels like 'gpay', 'phonepe' etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as 'link' and provider as 'gpay'
	Channel *OrderPayResponseChannel `json:"channel,omitempty"`
	Data    *OrderPayData            `json:"data,omitempty"`
	// One of ["upi", "netbanking", "card", "app", "cardless_emi", "paylater"]
	PaymentMethod *OrderPayResponsePaymentMethod `json:"payment_method,omitempty"`
}

func (o *OrderPayResponse) GetAction() *OrderPayResponseAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *OrderPayResponse) GetCfPaymentID() *int64 {
	if o == nil {
		return nil
	}
	return o.CfPaymentID
}

func (o *OrderPayResponse) GetChannel() *OrderPayResponseChannel {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *OrderPayResponse) GetData() *OrderPayData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *OrderPayResponse) GetPaymentMethod() *OrderPayResponsePaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}
