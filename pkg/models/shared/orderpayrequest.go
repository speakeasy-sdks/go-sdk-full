// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type OrderPayRequestPaymentMethodType string

const (
	OrderPayRequestPaymentMethodTypeCardPaymentMethod        OrderPayRequestPaymentMethodType = "CardPaymentMethod"
	OrderPayRequestPaymentMethodTypeUPIPaymentMethod         OrderPayRequestPaymentMethodType = "UPIPaymentMethod"
	OrderPayRequestPaymentMethodTypeNetBankingPaymentMethod  OrderPayRequestPaymentMethodType = "NetBankingPaymentMethod"
	OrderPayRequestPaymentMethodTypeAppPaymentMethod         OrderPayRequestPaymentMethodType = "AppPaymentMethod"
	OrderPayRequestPaymentMethodTypeCardEMIPaymentMethod     OrderPayRequestPaymentMethodType = "CardEMIPaymentMethod"
	OrderPayRequestPaymentMethodTypeCardlessEMIPaymentMethod OrderPayRequestPaymentMethodType = "CardlessEMIPaymentMethod"
	OrderPayRequestPaymentMethodTypePaylaterPaymentMethod    OrderPayRequestPaymentMethodType = "PaylaterPaymentMethod"
)

type OrderPayRequestPaymentMethod struct {
	CardPaymentMethod        *CardPaymentMethod
	UPIPaymentMethod         *UPIPaymentMethod
	NetBankingPaymentMethod  *NetBankingPaymentMethod
	AppPaymentMethod         *AppPaymentMethod
	CardEMIPaymentMethod     *CardEMIPaymentMethod
	CardlessEMIPaymentMethod *CardlessEMIPaymentMethod
	PaylaterPaymentMethod    *PaylaterPaymentMethod

	Type OrderPayRequestPaymentMethodType
}

func CreateOrderPayRequestPaymentMethodCardPaymentMethod(cardPaymentMethod CardPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeCardPaymentMethod

	return OrderPayRequestPaymentMethod{
		CardPaymentMethod: &cardPaymentMethod,
		Type:              typ,
	}
}

func CreateOrderPayRequestPaymentMethodUPIPaymentMethod(upiPaymentMethod UPIPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeUPIPaymentMethod

	return OrderPayRequestPaymentMethod{
		UPIPaymentMethod: &upiPaymentMethod,
		Type:             typ,
	}
}

func CreateOrderPayRequestPaymentMethodNetBankingPaymentMethod(netBankingPaymentMethod NetBankingPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeNetBankingPaymentMethod

	return OrderPayRequestPaymentMethod{
		NetBankingPaymentMethod: &netBankingPaymentMethod,
		Type:                    typ,
	}
}

func CreateOrderPayRequestPaymentMethodAppPaymentMethod(appPaymentMethod AppPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeAppPaymentMethod

	return OrderPayRequestPaymentMethod{
		AppPaymentMethod: &appPaymentMethod,
		Type:             typ,
	}
}

func CreateOrderPayRequestPaymentMethodCardEMIPaymentMethod(cardEMIPaymentMethod CardEMIPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeCardEMIPaymentMethod

	return OrderPayRequestPaymentMethod{
		CardEMIPaymentMethod: &cardEMIPaymentMethod,
		Type:                 typ,
	}
}

func CreateOrderPayRequestPaymentMethodCardlessEMIPaymentMethod(cardlessEMIPaymentMethod CardlessEMIPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypeCardlessEMIPaymentMethod

	return OrderPayRequestPaymentMethod{
		CardlessEMIPaymentMethod: &cardlessEMIPaymentMethod,
		Type:                     typ,
	}
}

func CreateOrderPayRequestPaymentMethodPaylaterPaymentMethod(paylaterPaymentMethod PaylaterPaymentMethod) OrderPayRequestPaymentMethod {
	typ := OrderPayRequestPaymentMethodTypePaylaterPaymentMethod

	return OrderPayRequestPaymentMethod{
		PaylaterPaymentMethod: &paylaterPaymentMethod,
		Type:                  typ,
	}
}

func (u *OrderPayRequestPaymentMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cardPaymentMethod := new(CardPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cardPaymentMethod); err == nil {
		u.CardPaymentMethod = cardPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeCardPaymentMethod
		return nil
	}

	upiPaymentMethod := new(UPIPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&upiPaymentMethod); err == nil {
		u.UPIPaymentMethod = upiPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeUPIPaymentMethod
		return nil
	}

	netBankingPaymentMethod := new(NetBankingPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&netBankingPaymentMethod); err == nil {
		u.NetBankingPaymentMethod = netBankingPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeNetBankingPaymentMethod
		return nil
	}

	appPaymentMethod := new(AppPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&appPaymentMethod); err == nil {
		u.AppPaymentMethod = appPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeAppPaymentMethod
		return nil
	}

	cardEMIPaymentMethod := new(CardEMIPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cardEMIPaymentMethod); err == nil {
		u.CardEMIPaymentMethod = cardEMIPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeCardEMIPaymentMethod
		return nil
	}

	cardlessEMIPaymentMethod := new(CardlessEMIPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cardlessEMIPaymentMethod); err == nil {
		u.CardlessEMIPaymentMethod = cardlessEMIPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypeCardlessEMIPaymentMethod
		return nil
	}

	paylaterPaymentMethod := new(PaylaterPaymentMethod)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paylaterPaymentMethod); err == nil {
		u.PaylaterPaymentMethod = paylaterPaymentMethod
		u.Type = OrderPayRequestPaymentMethodTypePaylaterPaymentMethod
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OrderPayRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if u.CardPaymentMethod != nil {
		return json.Marshal(u.CardPaymentMethod)
	}

	if u.UPIPaymentMethod != nil {
		return json.Marshal(u.UPIPaymentMethod)
	}

	if u.NetBankingPaymentMethod != nil {
		return json.Marshal(u.NetBankingPaymentMethod)
	}

	if u.AppPaymentMethod != nil {
		return json.Marshal(u.AppPaymentMethod)
	}

	if u.CardEMIPaymentMethod != nil {
		return json.Marshal(u.CardEMIPaymentMethod)
	}

	if u.CardlessEMIPaymentMethod != nil {
		return json.Marshal(u.CardlessEMIPaymentMethod)
	}

	if u.PaylaterPaymentMethod != nil {
		return json.Marshal(u.PaylaterPaymentMethod)
	}

	return nil, errors.New("could not marshal union type: all fields are null")

}

type OrderPayRequest struct {
	// This is required if any offers needs to be applied to the order.
	OfferID          *string                      `json:"offer_id,omitempty"`
	PaymentMethod    OrderPayRequestPaymentMethod `json:"payment_method"`
	PaymentSessionID string                       `json:"payment_session_id"`
	SaveInstrument   *bool                        `json:"save_instrument,omitempty"`
}

func (o *OrderPayRequest) GetOfferID() *string {
	if o == nil {
		return nil
	}
	return o.OfferID
}

func (o *OrderPayRequest) GetPaymentMethod() OrderPayRequestPaymentMethod {
	if o == nil {
		return OrderPayRequestPaymentMethod{}
	}
	return o.PaymentMethod
}

func (o *OrderPayRequest) GetPaymentSessionID() string {
	if o == nil {
		return ""
	}
	return o.PaymentSessionID
}

func (o *OrderPayRequest) GetSaveInstrument() *bool {
	if o == nil {
		return nil
	}
	return o.SaveInstrument
}
