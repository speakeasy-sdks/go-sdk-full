// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type Data struct {
	// Amount that is adjusted from the settlement amount because of any credit/debit event such as refund, refund_reverse etc.
	Adjustment *float64 `json:"adjustment,omitempty"`
	// Other adjustment remarks.
	AdjustmentRemarks *string `json:"adjustment_remarks,omitempty"`
	// Net amount that is settled after considering the adjustments, settlement charge and tax.
	AmountSettled *float64 `json:"amount_settled,omitempty"`
	// Cashfree Payments unique ID to identify a payment.
	CfPaymentID *int64 `json:"cf_payment_id,omitempty"`
	// Unique ID to identify the settlement.
	CfSettlementID *int64 `json:"cf_settlement_id,omitempty"`
	// Specifies whether the dispute was closed in favor of the merchant or customer. /n Possible values - Merchant, Customer
	ClosedInFavorOf *string `json:"closed_in_favor_of,omitempty"`
	// Customer email.
	CustomerEmail *string `json:"customer_email,omitempty"`
	// Customer name.
	CustomerName *string `json:"customer_name,omitempty"`
	// Customer phone number.
	CustomerPhone *string `json:"customer_phone,omitempty"`
	// Category of the dispute - Dispute code and the reason for dispute is shown.
	DisputeCategory *string `json:"dispute_category,omitempty"`
	// Note regarding the dispute.
	DisputeNote *string `json:"dispute_note,omitempty"`
	// Date and time when the dispute was resolved.
	DisputeResolvedOn *string `json:"dispute_resolved_on,omitempty"`
	// Recon
	Entity *string `json:"entity,omitempty"`
	// Amount of the event. Example, refund amount, dispute amount, payment amount, etc.
	EventAmount *float64 `json:"event_amount,omitempty"`
	// Curreny type - INR.
	EventCurrency *string `json:"event_currency,omitempty"`
	// Unique ID associated with the event.
	EventID *string `json:"event_id,omitempty"`
	// Amount that is part of the settlement corresponding to the event.
	EventSettlementAmount *float64 `json:"event_settlement_amount,omitempty"`
	// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
	EventStatus *string `json:"event_status,omitempty"`
	// Time associated with the event. Example, transaction time, dispute initiation time
	EventTime *string `json:"event_time,omitempty"`
	// The event type can be SETTLEMENT, PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
	EventType *string `json:"event_type,omitempty"`
	// The amount which was passed at the order creation time.
	OrderAmount *float64 `json:"order_amount,omitempty"`
	// Unique order ID. Alphanumeric and only '-' and '_' allowed.
	OrderID *string `json:"order_id,omitempty"`
	// Payment amount captured.
	PaymentAmount *float64 `json:"payment_amount,omitempty"`
	// The start time of the time range of the payments considered for the settlement.
	PaymentFrom *string `json:"payment_from,omitempty"`
	// Service charge applicable for the payment.
	PaymentServiceCharge *float64 `json:"payment_service_charge,omitempty"`
	// Service tax applicable on the payment.
	PaymentServiceTax *float64 `json:"payment_service_tax,omitempty"`
	// The end time of time range of the payments considered for the settlement.
	PaymentTill *string `json:"payment_till,omitempty"`
	// Date and time when the payment was initiated.
	PaymentTime *string `json:"payment_time,omitempty"`
	// Unique transaction reference number of the payment.
	PaymentUtr *string `json:"payment_utr,omitempty"`
	// Reason for settlement failure.
	Reason *string `json:"reason,omitempty"`
	// The bank reference number for the refund.
	RefundArn *string `json:"refund_arn,omitempty"`
	// An unique ID to associate the refund with.
	RefundID *string `json:"refund_id,omitempty"`
	// A refund note for your reference.
	RefundNote *string `json:"refund_note,omitempty"`
	// Date and time when the refund was processed.
	RefundProcessedAt *string `json:"refund_processed_at,omitempty"`
	// Remarks on the settlement.
	Remarks *string `json:"remarks,omitempty"`
	// Indicates if it is CREDIT/DEBIT sale.
	SaleType *string `json:"sale_type,omitempty"`
	// Service charge applicable on the settlement amount.
	ServiceCharge *float64 `json:"service_charge,omitempty"`
	// Service tax applicable on the settlement amount.
	ServiceTax *float64 `json:"service_tax,omitempty"`
	// Settlement charges applicable on the settlement.
	SettlementCharge *float64 `json:"settlement_charge,omitempty"`
	// Date and time when the settlement was processed.
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Date and time when the settlement was initiated.
	SettlementInitiatedOn *string `json:"settlement_initiated_on,omitempty"`
	// Settlement tax applicable on the settlement.
	SettlementTax *float64 `json:"settlement_tax,omitempty"`
	// Type of settlement. Possible values - Standard, Instant, On demand.
	SettlementType *string `json:"settlement_type,omitempty"`
	// Unique transaction reference number of the settlement.
	SettlementUtr *string `json:"settlement_utr,omitempty"`
	// Service charge that is applicable for splitting the payment.
	SplitServiceCharge *float64 `json:"split_service_charge,omitempty"`
	// Service tax applicable for splitting the amount to vendors.
	SplitServiceTax *float64 `json:"split_service_tax,omitempty"`
	// Vendor commission applicable for this transaction.
	VendorCommission *float64 `json:"vendor_commission,omitempty"`
}

func (o *Data) GetAdjustment() *float64 {
	if o == nil {
		return nil
	}
	return o.Adjustment
}

func (o *Data) GetAdjustmentRemarks() *string {
	if o == nil {
		return nil
	}
	return o.AdjustmentRemarks
}

func (o *Data) GetAmountSettled() *float64 {
	if o == nil {
		return nil
	}
	return o.AmountSettled
}

func (o *Data) GetCfPaymentID() *int64 {
	if o == nil {
		return nil
	}
	return o.CfPaymentID
}

func (o *Data) GetCfSettlementID() *int64 {
	if o == nil {
		return nil
	}
	return o.CfSettlementID
}

func (o *Data) GetClosedInFavorOf() *string {
	if o == nil {
		return nil
	}
	return o.ClosedInFavorOf
}

func (o *Data) GetCustomerEmail() *string {
	if o == nil {
		return nil
	}
	return o.CustomerEmail
}

func (o *Data) GetCustomerName() *string {
	if o == nil {
		return nil
	}
	return o.CustomerName
}

func (o *Data) GetCustomerPhone() *string {
	if o == nil {
		return nil
	}
	return o.CustomerPhone
}

func (o *Data) GetDisputeCategory() *string {
	if o == nil {
		return nil
	}
	return o.DisputeCategory
}

func (o *Data) GetDisputeNote() *string {
	if o == nil {
		return nil
	}
	return o.DisputeNote
}

func (o *Data) GetDisputeResolvedOn() *string {
	if o == nil {
		return nil
	}
	return o.DisputeResolvedOn
}

func (o *Data) GetEntity() *string {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *Data) GetEventAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.EventAmount
}

func (o *Data) GetEventCurrency() *string {
	if o == nil {
		return nil
	}
	return o.EventCurrency
}

func (o *Data) GetEventID() *string {
	if o == nil {
		return nil
	}
	return o.EventID
}

func (o *Data) GetEventSettlementAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.EventSettlementAmount
}

func (o *Data) GetEventStatus() *string {
	if o == nil {
		return nil
	}
	return o.EventStatus
}

func (o *Data) GetEventTime() *string {
	if o == nil {
		return nil
	}
	return o.EventTime
}

func (o *Data) GetEventType() *string {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *Data) GetOrderAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.OrderAmount
}

func (o *Data) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *Data) GetPaymentAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.PaymentAmount
}

func (o *Data) GetPaymentFrom() *string {
	if o == nil {
		return nil
	}
	return o.PaymentFrom
}

func (o *Data) GetPaymentServiceCharge() *float64 {
	if o == nil {
		return nil
	}
	return o.PaymentServiceCharge
}

func (o *Data) GetPaymentServiceTax() *float64 {
	if o == nil {
		return nil
	}
	return o.PaymentServiceTax
}

func (o *Data) GetPaymentTill() *string {
	if o == nil {
		return nil
	}
	return o.PaymentTill
}

func (o *Data) GetPaymentTime() *string {
	if o == nil {
		return nil
	}
	return o.PaymentTime
}

func (o *Data) GetPaymentUtr() *string {
	if o == nil {
		return nil
	}
	return o.PaymentUtr
}

func (o *Data) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *Data) GetRefundArn() *string {
	if o == nil {
		return nil
	}
	return o.RefundArn
}

func (o *Data) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *Data) GetRefundNote() *string {
	if o == nil {
		return nil
	}
	return o.RefundNote
}

func (o *Data) GetRefundProcessedAt() *string {
	if o == nil {
		return nil
	}
	return o.RefundProcessedAt
}

func (o *Data) GetRemarks() *string {
	if o == nil {
		return nil
	}
	return o.Remarks
}

func (o *Data) GetSaleType() *string {
	if o == nil {
		return nil
	}
	return o.SaleType
}

func (o *Data) GetServiceCharge() *float64 {
	if o == nil {
		return nil
	}
	return o.ServiceCharge
}

func (o *Data) GetServiceTax() *float64 {
	if o == nil {
		return nil
	}
	return o.ServiceTax
}

func (o *Data) GetSettlementCharge() *float64 {
	if o == nil {
		return nil
	}
	return o.SettlementCharge
}

func (o *Data) GetSettlementDate() *string {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *Data) GetSettlementInitiatedOn() *string {
	if o == nil {
		return nil
	}
	return o.SettlementInitiatedOn
}

func (o *Data) GetSettlementTax() *float64 {
	if o == nil {
		return nil
	}
	return o.SettlementTax
}

func (o *Data) GetSettlementType() *string {
	if o == nil {
		return nil
	}
	return o.SettlementType
}

func (o *Data) GetSettlementUtr() *string {
	if o == nil {
		return nil
	}
	return o.SettlementUtr
}

func (o *Data) GetSplitServiceCharge() *float64 {
	if o == nil {
		return nil
	}
	return o.SplitServiceCharge
}

func (o *Data) GetSplitServiceTax() *float64 {
	if o == nil {
		return nil
	}
	return o.SplitServiceTax
}

func (o *Data) GetVendorCommission() *float64 {
	if o == nil {
		return nil
	}
	return o.VendorCommission
}

type FetchPGRecon struct {
	// Specifies from where the next set of settlement details should be fetched.
	Cursor *string `json:"cursor,omitempty"`
	Data   []Data  `json:"data,omitempty"`
	// Number of settlements you want to fetch in the next iteration.
	Limit *int64 `json:"limit,omitempty"`
}

func (o *FetchPGRecon) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *FetchPGRecon) GetData() []Data {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *FetchPGRecon) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}
